trigger:
  branches:
    include:
    - main
  paths:
    include:
    - source/*
  tags:
    include:
    - "v*"
    exclude:
    - "*-*"

variables:
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  sourceFolderName: source
  defaultBranch: main

stages:
  - stage: Build
    jobs:
      - job: Package_Module
        displayName: 'Package Module'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - pwsh: |
              dotnet tool install --global GitVersion.Tool
              $gitVersionObject = dotnet-gitversion | ConvertFrom-Json
              $gitVersionObject.PSObject.Properties.ForEach{
                  Write-Host -Object "Setting Task Variable '$($_.Name)' with value '$($_.Value)'."
                  Write-Host -Object "##vso[task.setvariable variable=$($_.Name);]$($_.Value)"
              }
              Write-Host -Object "##vso[build.updatebuildnumber]$($gitVersionObject.FullSemVer)"
            displayName: Calculate ModuleVersion (GitVersion)
          - task: PowerShell@2
            name: package
            displayName: 'Build & Package Module'
            inputs:
              filePath: './build.ps1'
              arguments: '-ResolveDependency -tasks pack'
              pwsh: true
            env:
              ModuleVersion: $(NuGetVersionV2)
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Build Artifact'
            inputs:
              targetPath: '$(buildFolderName)/'
              artifact: $(buildArtifactName)
              publishLocation: 'pipeline'
              parallel: true

  - stage: Test
    dependsOn: Build
    jobs:
    - job: Test_HQRM
      displayName: 'HQRM'
      pool:
        vmImage: 'windows-latest'
      timeoutInMinutes: 0
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Build Artifact'
          inputs:
            buildType: 'current'
            artifactName: $(buildArtifactName)
            targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
        - task: PowerShell@2
          name: test
          displayName: 'Run HQRM Test'
          inputs:
            filePath: './build.ps1'
            arguments: '-Tasks hqrmtest'
            pwsh: false
        - task: PublishTestResults@2
          displayName: 'Publish Test Results'
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: 'NUnit'
            testResultsFiles: 'output/testResults/NUnit*.xml'
            testRunTitle: 'HQRM'

    - job: test_windows_wps
      displayName: 'Unit Windows (WPS)'
      pool:
        vmImage: 'windows-latest'
      timeoutInMinutes: 0
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Build Artifact'
          inputs:
            buildType: 'current'
            artifactName: $(buildArtifactName)
            targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
        - task: PowerShell@2
          name: test
          displayName: 'Run Unit Test'
          inputs:
            filePath: './build.ps1'
            arguments: "-Tasks test"
            pwsh: false
        - task: PublishTestResults@2
          displayName: 'Publish Test Results'
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: 'NUnit'
            testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
            testRunTitle: 'Test Windows (WPS)'
        - task: PublishPipelineArtifact@1
          displayName: 'Publish Test Artifact'
          condition: succeededOrFailed()
          inputs:
            targetPath: '$(buildFolderName)/$(testResultFolderName)/'
            artifactName: 'CodeCoverageWindowsWPS'
            parallel: true

    - job: test_windows_ps
      displayName: 'Unit Windows (PS)'
      pool:
        vmImage: 'windows-latest'
      timeoutInMinutes: 0
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Build Artifact'
          inputs:
            buildType: 'current'
            artifactName: $(buildArtifactName)
            targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
        - task: PowerShell@2
          name: test
          displayName: 'Run Unit Test'
          inputs:
            filePath: './build.ps1'
            arguments: "-Tasks test"
            pwsh: true
        - task: PublishTestResults@2
          displayName: 'Publish Test Results'
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: 'NUnit'
            testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
            testRunTitle: 'Test Windows (PS)'
        - task: PublishPipelineArtifact@1
          displayName: 'Publish Test Artifact'
          condition: succeededOrFailed()
          inputs:
            targetPath: '$(buildFolderName)/$(testResultFolderName)/'
            artifactName: 'CodeCoverageWindowsPS'
            parallel: true

    - job: test_linux
      displayName: 'Unit Linux'
      pool:
        vmImage: 'ubuntu-20.04'
      timeoutInMinutes: 0
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Build Artifact'
          inputs:
            buildType: 'current'
            artifactName: $(buildArtifactName)
            targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
        - script: |
              wget https://github.com/microsoft/omi/releases/download/v1.6.8-1/omi-1.6.8-1.ssl_110.ulinux.x64.deb
              wget https://github.com/microsoft/PowerShell-DSC-for-Linux/releases/download/v1.2.1-0/dsc-1.2.1-0.ssl_100.x64.deb

              sudo dpkg -i omi-1.6.8-1.ssl_110.ulinux.x64.deb dsc-1.2.1-0.ssl_100.x64.deb

              # This is a fix to the following DSC for Linux issue: https://github.com/microsoft/PowerShell-DSC-for-Linux/issues/674
              sudo mv /etc/opt/omi/conf/dsc/configuration/baseregistration /etc/opt/omi/conf/dsc/configuration/BaseRegistration
              sudo mv /etc/opt/omi/conf/dsc/configuration/BaseRegistration/baseresource.schema.mof /etc/opt/omi/conf/dsc/configuration/BaseRegistration/BaseResource.schema.mof
          displayName: 'Install DSC for Linux'
        - task: PowerShell@2
          name: test
          displayName: 'Run Unit Test'
          inputs:
            filePath: './build.ps1'
            arguments: "-Tasks test"
            pwsh: true
        - task: PublishTestResults@2
          displayName: 'Publish Test Results'
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: 'NUnit'
            testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
            testRunTitle: 'Test Linux'
        - task: PublishPipelineArtifact@1
          displayName: 'Publish Test Artifact'
          condition: succeededOrFailed()
          inputs:
            targetPath: '$(buildFolderName)/$(testResultFolderName)/'
            artifactName: 'CodeCoverageLinux'
            parallel: true

    - job: test_macos
      displayName: 'Unit macOS'
      pool:
        vmImage: 'macos-latest'
      timeoutInMinutes: 0
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Build Artifact'
          inputs:
            buildType: 'current'
            artifactName: $(buildArtifactName)
            targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
        - task: PowerShell@2
          name: test
          displayName: 'Run Unit Test'
          inputs:
            filePath: './build.ps1'
            arguments: "-Tasks test"
            pwsh: true
        - task: PublishTestResults@2
          displayName: 'Publish Test Results'
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: 'NUnit'
            testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
            testRunTitle: 'Test macOS'
        - task: PublishPipelineArtifact@1
          displayName: 'Publish Test Artifact'
          condition: succeededOrFailed()
          inputs:
            targetPath: '$(buildFolderName)/$(testResultFolderName)/'
            artifactName: 'CodeCoverageMacOS'
            parallel: true

    - job: Test_Integration
      displayName: 'Integration'
      pool:
        vmImage: 'windows-latest'
      timeoutInMinutes: 0
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Build Artifact'
          inputs:
            buildType: 'current'
            artifactName: $(buildArtifactName)
            targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
        - task: PowerShell@2
          name: configureWinRM
          displayName: 'Configure WinRM'
          inputs:
            targetType: 'inline'
            script: 'winrm quickconfig -quiet'
            pwsh: false
        - task: PowerShell@2
          name: test
          displayName: 'Run Integration Test'
          inputs:
            filePath: './build.ps1'
            arguments: "-Tasks test -CodeCoverageThreshold 0 -PesterScript 'tests/Integration'"
            pwsh: false
        - task: PublishTestResults@2
          displayName: 'Publish Test Results'
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: 'NUnit'
            testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
            testRunTitle: 'Integration'

    - job: Code_Coverage
      displayName: 'Publish Code Coverage'
      dependsOn:
      - test_windows_wps
      - test_windows_ps
      - test_linux
      - test_macos
      condition: succeededOrFailed()
      pool:
        vmImage: 'ubuntu-latest'
      timeoutInMinutes: 0
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Build Artifact'
          inputs:
            buildType: 'current'
            artifactName: $(buildArtifactName)
            targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Test Artifact Linux'
          inputs:
            buildType: 'current'
            artifactName: 'CodeCoverageLinux'
            targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCoverageLinux'
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Test Artifact Windows (WPS)'
          inputs:
            buildType: 'current'
            artifactName: 'CodeCoverageWindowsWPS'
            targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCoverageWindowsWPS'
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Test Artifact Windows (PS)'
          inputs:
            buildType: 'current'
            artifactName: 'CodeCoverageWindowsPS'
            targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCoverageWindowsPS'
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Test Artifact macOS'
          inputs:
            buildType: 'current'
            artifactName: 'CodeCoverageMacOS'
            targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCoverageMacOS'
        - task: PowerShell@2 # Merges the code coverage files.
          name: merge
          displayName: 'Merge Code Coverage files'
          inputs:
            filePath: './build.ps1'
            arguments: '-tasks merge'
            pwsh: true
        - task: PublishCodeCoverageResults@1
          displayName: 'Publish Code Coverage to Azure DevOps'
          inputs:
            codeCoverageTool: 'JaCoCo'
            summaryFileLocation: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/JaCoCo_coverage.xml'
            pathToSources: '$(Build.SourcesDirectory)/$(sourceFolderName)/'
        - script: |
            bash <(curl -s https://codecov.io/bash) -f "./$(buildFolderName)/$(testResultFolderName)/JaCoCo_coverage.xml"
          displayName: 'Publish Code Coverage to Codecov.io'

  - stage: Deploy
    dependsOn: Test
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        ),
        contains(variables['System.TeamFoundationCollectionUri'], 'dsccommunity')
      )
    jobs:
      - job: Deploy_Module
        displayName: 'Deploy Module'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'
          - task: PowerShell@2
            name: publishRelease
            displayName: 'Publish Release'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks publish'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              GalleryApiToken: $(GalleryApiToken)
              ReleaseBranch: $(defaultBranch)
              MainGitBranch: $(defaultBranch)
          - task: PowerShell@2
            name: sendChangelogPR
            displayName: 'Send Changelog PR'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks Create_ChangeLog_GitHub_PR'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              ReleaseBranch: $(defaultBranch)
              MainGitBranch: $(defaultBranch)
