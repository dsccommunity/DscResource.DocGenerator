
<#
    .SYNOPSIS
        Publishes the Wiki Content that is generated by New-DscResourceWikiPage.

    .DESCRIPTION
        Publishes the Wiki content that was generated by the cmdlet `New-DscResourceWikiPage`.

        If there is an existing `_Sidebar.md` present in the `WikiOutput` folder then
        it will be published. If there is no existing `_Sidebar.md` in the `WikiOutput`
        folder a `_Sidebar.md` file will be dynamically generated based on the files
        in the `WikiOutput` folder.

        >**NOTE:** There must already be a Wiki created in the GitHub repository
        >before using this cmdlet, otherwise it will fail since there is no Wiki
        >repository.

    .PARAMETER Path
        The path to the output that was generated by New-DscResourceWikiPage.

    .PARAMETER OwnerName
        The owner name of the Github repository.

    .PARAMETER RepositoryName
        The name of the Github repository.

    .PARAMETER ModuleName
        The name of the Dsc Resource Module.

    .PARAMETER ModuleVersion
        The build version number to tag the Wiki Github commit with.

    .PARAMETER GitHubAccessToken
        The GitHub access token to allow a push to the GitHub Wiki.

    .PARAMETER GitUserEmail
        The email address to use for the Git commit.

    .PARAMETER GitUserName
        The user name to use for the Git commit.

    .PARAMETER GlobalCoreAutoCrLf
        Specifies how line breaks should be handled when cloning the
        GitHub wiki repository. Valid values are 'true', 'false', or
        'input'.

    .EXAMPLE
        Publish-WikiContent `
            -Path '.\output\WikiContent' `
            -OwnerName 'dsccommunity' `
            -RepositoryName 'SqlServerDsc' `
            -ModuleName 'SqlServerDsc' `
            -ModuleVersion '14.0.0' `
            -GitHubAccessToken 'token' `
            -GitUserEmail 'email@contoso.com' `
            -GitUserName 'dsc'

        Adds the content pages in '.\output\WikiContent' to the Wiki for the
        specified GitHub repository.

    .EXAMPLE
        Publish-WikiContent `
            -Path '.\output\WikiContent' `
            -OwnerName 'dsccommunity' `
            -RepositoryName 'SqlServerDsc' `
            -ModuleName 'SqlServerDsc' `
            -ModuleVersion '14.0.0' `
            -GitHubAccessToken 'token' `
            -GitUserEmail 'email@contoso.com' `
            -GitUserName 'dsc' `
            -GlobalCoreAutoCrLf 'true'

        Adds the content pages in '.\output\WikiContent' to the Wiki for the
        specified GitHub repository. The wiki repository will be cloned after the
        git configuration setting `--global core.autocrlf` have been set to `true`
        making sure the current wiki files are checkout using CRLF.
#>
function Publish-WikiContent
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $true)]
        [System.String]
        $Path,

        [Parameter(Mandatory = $true)]
        [System.String]
        $OwnerName,

        [Parameter(Mandatory = $true)]
        [System.String]
        $RepositoryName,

        [Parameter(Mandatory = $true)]
        [System.String]
        $ModuleName,

        [Parameter(Mandatory = $true)]
        [System.String]
        $ModuleVersion,

        [Parameter(Mandatory = $true)]
        [System.String]
        $GitHubAccessToken,

        [Parameter(Mandatory = $true)]
        [System.String]
        $GitUserEmail,

        [Parameter(Mandatory = $true)]
        [System.String]
        $GitUserName,

        [Parameter()]
        [ValidateSet('true', 'false', 'input')]
        [System.String]
        $GlobalCoreAutoCrLf
    )

    $ErrorActionPreference = 'Stop'

    Write-Verbose -Message $script:localizedData.CreateTempDirMessage

    $tempFolder = New-TempFolder

    $tempPath = $tempFolder.FullName

    $wikiRepoName = "https://github.com/$OwnerName/$RepositoryName.wiki.git"

    try
    {
        if ($PSBoundParameters.ContainsKey('GlobalCoreAutoCrLf'))
        {
            Write-Verbose -Message $script:localizedData.ConfigGlobalGitMessage

            Invoke-Git -WorkingDirectory $tempPath `
                -Arguments @( 'config', '--global', 'core.autocrlf', $GlobalCoreAutoCrLf )
        }

        Write-Verbose -Message ($script:localizedData.CloneWikiGitRepoMessage -f $WikiRepoName)

        Invoke-Git -WorkingDirectory $tempPath -Arguments @( 'clone', $wikiRepoName, $tempPath )

        $copyWikiFileParameters = @{
            Path            = $Path
            DestinationPath = $tempPath
            Force           = $true
        }

        Copy-WikiFolder @copyWikiFileParameters

        New-WikiSidebar -ModuleName $ModuleName -OutputPath $tempPath -WikiSource $Path
        New-WikiFooter -OutputPath $tempPath -WikiSource $Path

        Write-Verbose -Message $script:localizedData.ConfigLocalGitMessage

        Invoke-Git -WorkingDirectory $tempPath `
            -Arguments @( 'config', '--local', 'user.email', $GitUserEmail )

        Invoke-Git -WorkingDirectory $tempPath `
            -Arguments @( 'config', '--local', 'user.name', $GitUserName )

        Invoke-Git -WorkingDirectory $tempPath `
            -Arguments @( 'remote', 'set-url', 'origin', "https://$($GitUserName):$($GitHubAccessToken)@github.com/$OwnerName/$RepositoryName.wiki.git" )

        Write-Verbose -Message $script:localizedData.AddWikiContentToGitRepoMessage

        Invoke-Git -WorkingDirectory $tempPath -Arguments @( 'add', '*' )

        Write-Verbose -Message ($script:localizedData.CommitAndTagRepoChangesMessage -f $ModuleVersion)

        Invoke-Git -WorkingDirectory $tempPath `
            -Arguments @( 'commit', '--message', "`"$($script:localizedData.UpdateWikiCommitMessage -f $ModuleVersion)`"" )

        Write-Verbose -Message $script:localizedData.PushUpdatedRepoMessage

        Invoke-Git -WorkingDirectory $tempPath `
            -Arguments @( 'tag', '--annotate', $ModuleVersion, '--message', $ModuleVersion )

        Invoke-Git -WorkingDirectory $tempPath -Arguments @( 'push', 'origin' )

        Invoke-Git -WorkingDirectory $tempPath -Arguments @( 'push', 'origin', $ModuleVersion )

        Write-Verbose -Message $script:localizedData.PublishWikiContentCompleteMessage
    }
    finally
    {
        Remove-Item -Path $tempPath -Recurse -Force
    }
}
